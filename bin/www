#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demoexpress:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9999');
app.set('port', port);
console.log(port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket.io lib
 */
const io = require('socket.io')(server);
let connectedUserList = []
let typingUserList = []
io.on('connection', ws => {
  console.log('---a user connected---');
  console.log(ws.id)
  connectedUserList.push(ws.id)
  io.emit('user list', connectedUserList);
  ws.on('disconnect', (reason) => {
    console.log('---a user disconnected---')
    console.log(reason)
    console.log(ws.id)
    connectedUserList.splice(connectedUserList.findIndex(connectedUser => connectedUser === ws.id), 1)
    io.emit('user list', connectedUserList);
  });
  ws.on('chat message', (wsMsg) => {
    io.emit('chat message', wsMsg);
  });
  ws.on('error', (error) => {
    console.error(error)
  })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
